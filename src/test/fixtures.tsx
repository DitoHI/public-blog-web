export default {
  blog: {
    title:
      'What drives me to build a web application with React, GraphQL, and CosmosDB? And why I choose not to bet on one of these technologies ?',
    content:
      '<p align="left">There is no better day than <em>today </em>to make a web application with a dedicated front-end technology to build it. The field of these emerging fields are so promosing. We have A<em>ngular, </em><em>V</em><em>ue, </em>and of course <em><strong>React</strong></em><em>. </em>Building web app right now is so much easier with these framework. You don&rsquo;t need to understand the <em>back-end </em>or <em>server </em>processing behind the app, because you just connect the app with many others API right there. Nonetheless, every programmer in the world certainly will be a <em>fullstack </em>someday. Because the basic of every field is basically same.</p>\n<p align="left">Now what I want to talk about is, how can you optimize these so many new trend technology to build your own application? Yet, I already know what you think of these technology before you start it. Yes, it&rsquo;s <em>overwhelming</em>. Really. Every day is so much <em>daunting. </em>There are many updates, fixing bugs, or commits every day. Although it&rsquo;s a common in the open source community, but it scares me a lot. Learning new things every day without having a focus goal is basically <em>wasting time </em>for me. So I thought, I want to bet on take a learning curve on these fullstack pack development technologies, which are React as a front-end, GraphQL with Express as a back-end, and Azure CosmosDB as my chosen database.</p>\n <p align="left">What I feel is, these new framework or technologies are really amazing. They are built to be as flexible as it should be. What amazes me most is <em><strong>React</strong></em>. Their concept of binding the core of DOM Javascript and HTML is really astonishing. With just one language which is <strong>Javascript</strong>, you can modify almost all the binding element inside DOM. And it&rsquo;s so simple. The core concepts of React are just states and props. Besides that, it&rsquo;s only a simple javascript. You don&rsquo;t need to edit any HTML or CSS pages, but you can do almost anything of that with a plain javascript.</p>\n <p align="left">Next thing what interests me more is GraphQL. Yes I know, GraphQL and React is built to be the couple of building full server and client side of web. And it was born under the same company too, <strong>Facebook</strong>. I&rsquo;m not surprised that combining these two technologies is such taking a new programming style to be the sweetest moment of coupling multiple techs. Graphql is quitely different with Rest API, which depends on the <strong>routes</strong>. GraphQL just need queries and mutations, although it still needs <em><strong>Express</strong></em> for the back-end routing. Because of that, any result from fetching the data is so flexible for the front-end programmer. They can get any data which is the most suitable suits for them. Back-end side just need the wrapper of query and mutation, which are the door to the database to be fetched by front-end side.</p>\n <p align="left">Because of a such sweetest couple like these, I come to love React and GraphQL. I gotta admit that I can be much more productive with Rest API. Express is born to make your own Rest API so much easier than before. But as I encountered the hypes behind GraphQL, I decided to take a try. And it&rsquo;s so addicting. Using GraphQL is like fetching data with just pure function. You make your own function to get data and call any controllers behind them. No configuring the routes, the endpoints, or any sick points from Rest API. It&rsquo;s also much more easier to be combined with React. Amazingly with GraphQL, it&rsquo;s recommended that you just utilize the fetching data with GraphQL and set the data without touching any states. Yes, it means you don&rsquo;t need <em><strong>Redux</strong></em> to make a your state management. Basically, rendering data from GraphQL with react-apollo (React client to fetch data from GraphQL) is real time rendering. And it&rsquo;s quitely stored in props too, same as Redux.</p>\n <p align="left">Now I come to the last of my effort. It&rsquo;s my chosen database system, which is CosmosDB. First of all, why did I choose it? It&rsquo;s because bundled with the Microsoft Azure. And I use Microsoft Azure as my chosen cloud platform. If we talk about why I choose Microsoft as my cloud provider, It&rsquo;s quietly clear why. Because Microsoft is already a big player on this. And why I did not choose Amazon Web Service (AWS) is because I already fond of Microsoft Technologies. And It&rsquo;s UI/UX of Azure is much friendlier and easier than AWS for me. But after I came along to try with CosmosDB, I just come to know that this database is still young. Yes, it&rsquo;s true. This database is just published to public in the last 2017. Cause of that, I found one of NoSQL feature which I did not find in CosmosDB but there is any in MongoDB, which is joining multiple tables. As I came across on building my blog app, I tend to join the collection of user with the collection of experience, project, and education. And there is <em>none </em>feature from CosmosDB to make a joining these collections. In the end I just come to solve these problem with manually fetching the key of other collection first before create the new data in the referenced collection. And basically for me, I don&rsquo;t really like the <em>Data Access Object </em>(DAO) pattern of its relational database. It&rsquo;s quietly tiring to make its controller and interface to modify the database to be separated. Maybe there are someone out there where they prefer something like separating controller of accessing data and controller of modifying the request, but I&rsquo;m basically comfortable enough with the pattern of MongoDB before. After I come to these problems, I decided not to bet on CosmosDB and drive my concern more on MongoDB or Firebase for my database platform.</p>\n <p align="left">Finally, building the full server app with these platform is really a challenger for me as I come from the background of Java environment. But I must fully admit that React and GraphQL are taking my interest more on betting to these technologies to make more platforms. In the near future, I still prepare for my new mobile application project with <strong>React Native. </strong>Hopefully I can finish it as soon as possible then I can share to you what I learn from building a mobile app with React Native and Native platforms such as Java for Android and Swift for iOS. And lastly, my blog app which is built here is technically open source. You can check the source code for the front-end side <a href="https://github.com/DitoHI/public-blog-web">here</a> and for the back-end side <a href="https://github.com/DitoHI/public-blog-api">here</a>. Build with love.</p>\n <p align="left">&nbsp;</p>',
    cover: {},
    tags: ['GraphQL', 'Web Development', 'React'],
    user: 'b56efb62-c9ab-3c89-c5a7-34ba6e3cf1c7',
    lastEdited: new Date(),
    isDeleted: false,
    positionIndex: 0,
    blobUri: 'https://cdn-images-1.medium.com/max/1017/1*9VyBulcxDuGbfz9FfcZMbg.png',
    id: '31074dc7-68c5-3134-fb9b-507931b65c9a',
    quote: 'GraphQL and React is such the Best Couple of Front Web Development now!',
    titlePreview:
      'What drives me to build a web application with React, GraphQL, and CosmosDB? And why...',
    contentPreview:
      'There is no better day than today to make a web application with a dedicated front-end technology to build it. The field of these emerging fields are so promosing. We have Angular, Vue, and of course...',
  },
  user: {
    id: 'b56efb62-c9ab-3c89-c5a7-34ba6e3cf1c7',
    name: 'Dito Hafizh Indriarto',
    email: 'ditohafizh@gmail.com',
    occupation: 'Software Engineer',
    isActived: true,
    address: '',
    phone: '',
    blobUri: 'https://publicblogapi.blob.core.windows.net/user/aroyo7AHN-DSC04282.JPG',
  },
};
